[{"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/App.js":"1","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/sidePanel.js":"2","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/userReducer.js":"3","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/chatRoom_action.js":"4","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/MessageForm.js":"5","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/mainPanel.js":"6","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/Message.js":"7","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/reportWebVitals.js":"8","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/chatRoom.js":"9","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/type.js":"10","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/ChatPage.js":"11","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/index.js":"12","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/RegisterPage/Register.js":"13","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/LoginPage/LoginPage.js":"14","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/DirectMessages.js":"15","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/ChatRoom.js":"16","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/firebase.js":"17","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/MessageHeader.js":"18","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/UserPanel.js":"19","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/Favorited.js":"20","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/commons/components/Skeleton.js":"21","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/user_action.js":"22","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/index.js":"23"},{"size":1472,"mtime":1609115514094,"results":"24","hashOfConfig":"25"},{"size":527,"mtime":1609863302530,"results":"26","hashOfConfig":"25"},{"size":759,"mtime":1609026813869,"results":"27","hashOfConfig":"25"},{"size":805,"mtime":1609870939643,"results":"28","hashOfConfig":"25"},{"size":5843,"mtime":1609873564380,"results":"29","hashOfConfig":"25"},{"size":6916,"mtime":1609869055578,"results":"30","hashOfConfig":"25"},{"size":1794,"mtime":1609512734865,"results":"31","hashOfConfig":"25"},{"size":362,"mtime":1608934853177,"results":"32","hashOfConfig":"25"},{"size":969,"mtime":1609865214493,"results":"33","hashOfConfig":"25"},{"size":484,"mtime":1609870931333,"results":"34","hashOfConfig":"25"},{"size":737,"mtime":1609512641290,"results":"35","hashOfConfig":"25"},{"size":1178,"mtime":1609017927733,"results":"36","hashOfConfig":"25"},{"size":4148,"mtime":1608954910233,"results":"37","hashOfConfig":"25"},{"size":2037,"mtime":1609018548196,"results":"38","hashOfConfig":"25"},{"size":3069,"mtime":1609868483875,"results":"39","hashOfConfig":"25"},{"size":8888,"mtime":1609873317226,"results":"40","hashOfConfig":"25"},{"size":619,"mtime":1608949456485,"results":"41","hashOfConfig":"25"},{"size":5905,"mtime":1609762591960,"results":"42","hashOfConfig":"25"},{"size":2884,"mtime":1609874182786,"results":"43","hashOfConfig":"25"},{"size":3011,"mtime":1609873860815,"results":"44","hashOfConfig":"25"},{"size":1427,"mtime":1609847205628,"results":"45","hashOfConfig":"25"},{"size":317,"mtime":1609864135384,"results":"46","hashOfConfig":"25"},{"size":206,"mtime":1609045144778,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"yo51sx",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/App.js",["105"],"import React, {useEffect} from 'react';\nimport {\n    Switch,\n    Route,\n    useHistory\n} from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nimport ChatPage from \"./components/ChatPage/ChatPage\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport Register from \"./components/RegisterPage/Register\";\nimport firebase from \"./firebase\";\nimport { clearUser, setUser } from \"./redux/actions/user_action\";\n\n\n\nfunction App() {\n    let history = useHistory();\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.user.isLoading);\n    useEffect(() => {\n        console.log('hhh');\n        firebase.auth().onAuthStateChanged((user) => {\n            //로그인\n            console.log(user);\n            if (user) {\n                console.log('login', user);\n                history.push('/');\n                dispatch(setUser(user));\n            } else {\n                console.log('gogo')\n                dispatch(clearUser())\n                history.push('/login');\n            }\n        });\n        console.log(345);\n    }, [])\n    if(isLoading) {\n        return <div>Loading...</div>\n    }\n    else {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={ChatPage}/>\n                <Route exact path=\"/login\" component={LoginPage}/>\n                <Route exact path=\"/register\" component={Register}/>\n            </Switch>\n        );\n    }\n}\n\nexport default App;\n",["106","107"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/sidePanel.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/userReducer.js",["108"],"import {CLEAR_USER, SET_USER, UPDATE_URL} from \"../actions/type\";\n\nconst initialState = {\n    customerUser: null,\n    isLoading: true,\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_USER:\n            return {\n                ...state,\n                customerUser: action.payload,\n                isLoading: false,\n            }\n        case CLEAR_USER:\n            return {\n                ...state,\n                customerUser: null,\n                isLoading: false,\n            }\n        case UPDATE_URL:\n            return {\n                ...state,\n                customerUser: {...state.customerUser, photoURL: action.payload }\n            }\n        default:\n            return state;\n    }\n}","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/chatRoom_action.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/MessageForm.js",["109","110","111","112"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/mainPanel.js",["113"],"import React, { Component, createRef, useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport MessageHeader from \"./MessageHeader\";\nimport MessageForm from \"./MessageForm\";\nimport firebase from \"../../../firebase\";\nimport Message from \"./Message\";\nimport {\n  addMessage,\n  setUsersPosts,\n} from \"../../../redux/actions/chatRoom_action\";\nimport Skeleton from \"../../../commons/components/Skeleton\";\n\nclass MainPanel extends Component {\n  messageEnd = createRef();\n\n  state = {\n    messagesRef: firebase.database().ref(\"message\"),\n    messages: [],\n    messageLoading: true,\n    searchTerm: \"\",\n    searchResult: [],\n    searchLoading: false,\n    typingRef: firebase.database().ref(\"typing\"),\n    typingUsers: [],\n    listenerLists: [],\n  };\n\n  componentDidMount() {\n    // this.addMessagesListener();\n    const currentRoom = this.props.chatRoom.currentRoom;\n\n    if (currentRoom) {\n      this.addMessagesListener(currentRoom.id);\n      this.addTypingListener(currentRoom.id);\n    }\n\n    setTimeout(() => {\n      if (this.state.messages.length === 0) {\n        this.setState({\n          messageLoading: false,\n        });\n      }\n    }, 1000);\n  }\n\n  componentDidUpdate = () => {\n    if (this.messageEnd) {\n      this.messageEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  componentWillUnmount() {\n    this.state.messagesRef.off();\n    this.removeListener(this.state.listenerLists);\n  }\n\n  removeListener = (listenerLists) => {\n    listenerLists.forEach((listener) => {\n      listener.ref.child(listener.id).off(listener.listenerEvent);\n    });\n  };\n\n  addTypingListener = (chatRoomId) => {\n    let typingUsers = [];\n    this.state.typingRef.child(chatRoomId).on(\"child_added\", (DatasnapShot) => {\n      // 나에게는 내가 치는 타이핑이 보여지면 안됨.\n      if (DatasnapShot.key !== this.props.user.uid) {\n        typingUsers = typingUsers.concat({\n          id: DatasnapShot.key,\n          name: DatasnapShot.val(),\n        });\n\n        this.setState({ typingUsers });\n      }\n      this.addListenerLists(chatRoomId, this.state.typingRef, \"child_added\");\n    });\n\n    // 타이핑을 지울때 해당 내용을 state에서 삭제\n    this.state.typingRef\n      .child(chatRoomId)\n      .on(\"child_removed\", (DatasnapShot) => {\n        const index = this.state.typingUsers.findIndex(\n          (user) => user.id === DatasnapShot.key\n        );\n\n        if (index !== -1) {\n          typingUsers = typingUsers.filter(\n            (user) => user.id !== DatasnapShot.key\n          );\n          this.setState({ typingUsers });\n        }\n        this.addListenerLists(\n          chatRoomId,\n          this.state.typingRef,\n          \"child_removed\"\n        );\n      });\n  };\n\n  addListenerLists = (id, ref, listenerEvent) => {\n    const index = this.state.listenerLists.findIndex((listener) => {\n      return (\n        listener.id === id &&\n        listener.ref === ref &&\n        listener.listenerLists === listenerEvent\n      );\n    });\n\n    if (index !== -1) {\n      const newListener = { id, ref, listenerEvent };\n      this.setState({\n        listenerLists: this.state.listenerLists.concat(newListener),\n      });\n    }\n  };\n\n  addMessagesListener = (roomId) => {\n    let messagesArray = [];\n    this.state.messagesRef.child(roomId).on(\"child_added\", (snapShot) => {\n      messagesArray.push(snapShot.val());\n      this.setState({\n        messages: messagesArray,\n        messageLoading: false,\n      });\n      this.userPostsCount(messagesArray);\n      this.props.dispatch(addMessage(messagesArray));\n    });\n  };\n\n  userPostsCount = (messages) => {\n    let userPosts = messages.reduce((acc, message) => {\n      if (!message.user.name) {\n        return acc;\n      }\n\n      if (message.user.name in acc) {\n        acc[message.user.name].count += 1;\n      } else {\n        acc[message.user.name] = {\n          image: message.user.image,\n          count: 1,\n        };\n      }\n      return acc;\n    }, {});\n    this.props.dispatch(setUsersPosts(userPosts));\n  };\n\n  renderMessages = (messages) => {\n    return messages.map((message) => (\n      <Message\n        key={message.timeStamp}\n        message={message}\n        user={this.props.user}\n      />\n    ));\n  };\n\n  onChangeHandler = (e) => {\n    this.setState(\n      {\n        searchTerm: e.target.value,\n        searchLoading: true,\n      },\n      () => {\n        const chatMessage = [...this.state.messages];\n        const regex = new RegExp(this.state.searchTerm, \"gi\");\n\n        const searchResults = chatMessage.reduce((acc, message) => {\n          if (\n            message.content &&\n            (message.content.match(regex) || message.user.name.match(regex))\n          ) {\n            acc.push(message);\n          }\n          return acc;\n        }, []);\n\n        this.setState({\n          searchResult: searchResults,\n          searchLoading: false,\n        });\n      }\n    );\n  };\n\n  renderTyping = (typingUser) => {\n    if (typingUser.length > 0) {\n      return (\n        <div style={{ fontSize: \"5px\" }}>\n          {typingUser[0].name}님이 입력하고 있습니다.........\n        </div>\n      );\n    }\n  };\n\n  messageSkeleton = (messageLoading) => {\n    if (messageLoading) {\n      return (\n        <>\n          {/*{[*/}\n          {/*  ...Array(10).map((v, i) => {*/}\n          {/*    return <Skeleton key={i} />;*/}\n          {/*  }),*/}\n          {/*]}*/}\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n          {[...new Array(10).map((v, i) => <Skeleton key={i} />)]}\n        </>\n      );\n    }\n  };\n\n  clearRenderMessage = () => {\n    setTimeout(() => {\n      if (this.props.chatRoom.messages.length > 0) {\n      }\n    }, 1000);\n    return <div></div>;\n  };\n\n  render() {\n    const { messages, searchResult, typingUsers, messageLoading } = this.state;\n    return (\n      <div>\n        <MessageHeader\n          onChangeHandler={this.onChangeHandler}\n          value={this.state.searchTerm}\n        />\n\n        <div\n          style={{\n            width: \"100%\",\n            height: \"450px\",\n            border: \".2rem solid #868e96\",\n            borderRadius: \"4px\",\n            padding: \"1rem\",\n            marginBottom: \"1rem\",\n            overflowY: \"auto\",\n          }}\n        >\n          {this.messageSkeleton(messageLoading)}\n          {searchResult.length\n            ? this.renderMessages(searchResult)\n            : this.renderMessages(messages)}\n\n          {this.renderTyping(typingUsers)}\n          <div ref={(node) => (this.messageEnd = node)} />\n        </div>\n        <MessageForm />\n      </div>\n    );\n  }\n}\n\nMainPanel.propTypes = {};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.customerUser,\n    chatRoom: state.chatRoom,\n  };\n};\n\nexport default connect(mapStateToProps)(MainPanel);\n",["114","115"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/Message.js",["116"],"import React from 'react';\nimport {Media} from \"react-bootstrap\";\nimport moment from 'moment';\n\nconst Message = ({ message, user }) => {\n\n    const timeFromNow = (timeStamp) => moment(timeStamp).fromNow();\n\n    const isImage = (message) => {\n        return message.hasOwnProperty('image') && !message.hasOwnProperty('content');\n    }\n\n    const isMe = () => {\n        if(user) {\n            return message.currentRoom.name === user.customerUser.displayName\n        }\n    }\n\n    return (\n        <div>\n            <Media style={{\n                marginBottom: '10px',\n            }}>\n                <img\n                    width={48}\n                    height={48}\n                    className=\"mr-3\"\n                    src={message.user.image}\n                    style={{\n                        display: 'inlineBlock',\n                        margin: '10px 16px 0px 14px',\n                        borderRadius: '50%',\n                    }}\n                />\n                <Media.Body style={{\n                    padding: '10px 0px 0px 10px',\n                    backgroundColor: isMe\n                        ? '#f1f3f5'\n                        : '#f8f0fc',\n                }}>\n                    <h6 style={{ display: 'inline-block', fontWeight: 'bold' }}>{message.user.name}</h6>\n                    <span style={{ color: 'gray', fontSize: '15px', marginLeft: '15px' }}>{timeFromNow(message.timeStamp)}</span>\n                        {isImage(message) ?\n                            <img style={{ maxWidth: '300px', borderRadius:'14px', display: 'block' }} src={message.image} alt=\"이미지\" />\n                            : <p> {message.content} </p>\n                        }\n                </Media.Body>\n            </Media>\n\n        </div>\n    );\n};\n\nexport default Message;\n","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/reportWebVitals.js",[],["117","118"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/chatRoom.js",["119"],"import {\n  ADD_MESSAGES,\n  CHANGE_MESSAGE_LOADING_STATUS,\n  SET_CURRENT_CHAT_ROOM,\n  SET_PRIVATE_CHAT_ROOM,\n  SET_USERS_POSTS,\n} from \"../actions/type\";\n\nconst initialChatRoomState = {\n  currentRoom: null,\n  privateChatRoom: false,\n  messages: [],\n  messageLoading: true,\n};\n\nexport default function (state = initialChatRoomState, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHAT_ROOM:\n      return {\n        ...state,\n        currentRoom: action.payload,\n      };\n    case SET_PRIVATE_CHAT_ROOM:\n      return {\n        ...state,\n        privateChatRoom: action.payload,\n      };\n    case SET_USERS_POSTS:\n      return {\n        ...state,\n        userPosts: action.payload,\n      };\n    case ADD_MESSAGES:\n      return {\n        ...state,\n        messages: state.messages.concat(action.payload),\n      };\n    case CHANGE_MESSAGE_LOADING_STATUS:\n      return {\n        ...state,\n        messageLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/type.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/ChatPage.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/index.js",["120"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware} from \"redux\";\nimport promiseMiddleware from 'redux-promise';\nimport reduxThunk from 'redux-thunk';\nimport rootReducer from \"./redux/reducer\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, reduxThunk)(createStore);\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={createStore(rootReducer,\n          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n        <Router>\n            <App />\n        </Router>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["121","122"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/RegisterPage/Register.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/LoginPage/LoginPage.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/DirectMessages.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/ChatRoom.js",["123"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/firebase.js",[],["124","125"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/mainPanel/MessageHeader.js",["126"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/UserPanel.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/components/ChatPage/sidePanel/Favorited.js",["127"],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/commons/components/Skeleton.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/actions/user_action.js",[],"/Users/mark/WebstormProjects/pretty/real_time_chat_app/src/redux/reducer/index.js",[],{"ruleId":"128","severity":1,"message":"129","line":38,"column":8,"nodeType":"130","endLine":38,"endColumn":10,"suggestions":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":8,"column":1,"nodeType":"138","endLine":30,"endColumn":2},{"ruleId":"139","severity":1,"message":"140","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":16},{"ruleId":"139","severity":1,"message":"143","line":5,"column":10,"nodeType":"141","messageId":"142","endLine":5,"endColumn":17},{"ruleId":"139","severity":1,"message":"144","line":13,"column":10,"nodeType":"141","messageId":"142","endLine":13,"endColumn":15},{"ruleId":"139","severity":1,"message":"145","line":100,"column":11,"nodeType":"141","messageId":"142","endLine":100,"endColumn":19},{"ruleId":"139","severity":1,"message":"146","line":1,"column":39,"nodeType":"141","messageId":"142","endLine":1,"endColumn":45},{"ruleId":"132","replacedBy":"147"},{"ruleId":"134","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":24,"column":17,"nodeType":"151","endLine":34,"endColumn":19},{"ruleId":"132","replacedBy":"152"},{"ruleId":"134","replacedBy":"153"},{"ruleId":"136","severity":1,"message":"137","line":16,"column":1,"nodeType":"138","endLine":46,"endColumn":2},{"ruleId":"139","severity":1,"message":"154","line":17,"column":7,"nodeType":"141","messageId":"142","endLine":17,"endColumn":32},{"ruleId":"132","replacedBy":"155"},{"ruleId":"134","replacedBy":"156"},{"ruleId":"139","severity":1,"message":"157","line":27,"column":7,"nodeType":"141","messageId":"142","endLine":27,"endColumn":11},{"ruleId":"132","replacedBy":"158"},{"ruleId":"134","replacedBy":"159"},{"ruleId":"128","severity":1,"message":"160","line":43,"column":6,"nodeType":"130","endLine":43,"endColumn":8,"suggestions":"161"},{"ruleId":"139","severity":1,"message":"162","line":36,"column":22,"nodeType":"141","messageId":"142","endLine":36,"endColumn":39},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["163"],"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unused-vars","'Picker' is defined but never used.","Identifier","unusedVar","'GrEmoji' is defined but never used.","'error' is assigned a value but never used.","'metaData' is assigned a value but never used.","'useRef' is defined but never used.",["164"],["165"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["164"],["165"],"'createStoreWithMiddleware' is assigned a value but never used.",["164"],["165"],"'Test' is assigned a value but never used.",["164"],["165"],"React Hook useEffect has missing dependencies: 'addFavoriteListener', 'chatRoom', and 'user'. Either include them or remove the dependency array.",["166"],"'favoriteChatRooms' is assigned a value but never used.",{"desc":"167","fix":"168"},"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [dispatch, history]",{"range":"171","text":"172"},"Update the dependencies array to be: [addFavoriteListener, chatRoom, user]",{"range":"173","text":"174"},[1091,1093],"[dispatch, history]",[1104,1106],"[addFavoriteListener, chatRoom, user]"]